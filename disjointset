#include &lt;stdio.h&gt;
struct DisjSet {
int parent[10];
int rank[10]; //rank[i] is the height of the tree representing the set
int n;
}dis;
// Creates n single item sets
void makeSet()
{
for (int i = 0; i &lt; dis.n; i++) {
dis.parent[i] = i;
dis.rank[i]=0;
}
}
//Displays Disjoint set
void displaySet()
{ printf(&quot;\nParent Array\n&quot;);
for (int i = 0; i &lt; dis.n; i++) {
printf(&quot;%d &quot;,dis.parent[i]); }
printf(&quot;\nRank Array\n&quot;);
for (int i = 0; i &lt; dis.n; i++)
{
printf(&quot;%d &quot;,dis.rank[i]);
}
printf(&quot;\n&quot;);
}
// Finds set of given item x
int find(int x)
{
// Finds the representative of the set
// that x is an element of

if (dis.parent[x] != x) {

// if x is not the parent of itself
// Then x is not the representative of
// his set,
dis.parent[x] = find(dis.parent[x]);

// so we recursively call Find on its parent
// and move i&#39;s node directly under the
// representative of this set
}
return dis.parent[x];
}

// Do union of two sets represented
// by x and y.
void Union(int x, int y)
{
// Find current sets of x and y
int xset = find(x);
int yset = find(y);

// If they are already in same set
if (xset == yset)
return;

// Put smaller ranked item under
// bigger ranked item if ranks are
// different
if (dis.rank[xset] &lt; dis.rank[yset]) {
dis.parent[xset] = yset;

dis.rank[xset]=-1;
}
else if (dis.rank[xset] &gt; dis.rank[yset]) {
dis.parent[yset] = xset;
dis.rank[yset]=-1;
}

// If ranks are same, then increment
// rank.
else {
dis.parent[yset] = xset;
dis.rank[xset] = dis.rank[xset] + 1;
dis.rank[yset]=-1;
}
}

int main()
{ int n,x,y;
printf(&quot;How many elements ?&quot;);
scanf(&quot;%d&quot;,&amp;dis.n);
makeSet();
int ch,wish;

do
{
printf(&quot;\n____MENU____\n&quot;);
printf(&quot;1. Union \n2.Find\n3.Display\n&quot;);
printf(&quot;enter choice\n&quot;);
scanf(&quot;%d&quot;,&amp;ch);

switch(ch)

{
case 1: printf(&quot;Enter elements to perform union&quot;);
scanf(&quot;%d %d&quot;,&amp;x,&amp;y);
Union(x, y);
break;
case 2: printf(&quot;Enter elements to check if connected components&quot;);
scanf(&quot;%d %d&quot;,&amp;x,&amp;y);
if (find(x) == find(y))
printf(&quot;Connected components\n&quot;) ;
else
printf(&quot;Not onnected components \n&quot;) ;
break;
case 3: displaySet();
break;
}
printf(&quot;\nDo you wish to continue ?(1/0)\n&quot;);
scanf(&quot;%d&quot;,&amp;wish);
}while(wish==1);
return 0;
}
